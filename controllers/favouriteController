const asyncHandler = require('express-async-handler');
const User = require('../models/userModel');
const Favourite = require('../models/favouriteModel');

// @desc  Get user's favourite chores
// @ route GET /api/favourites
// @ access Private

const getFavourites = asyncHandler(async (req, res) => {
  // Get user using the id in the JWT
  const user = await User.findById(req.user.id);

  if (!user) {
    res.status(401);
    throw new Error('User not found');
  }

  const favourites = await Favourite.find({ user: req.user.id });

  res.status(200).json(favourites);
});

// @desc  Create new favourite chore
// @ route POST /api/favourites
// @ access Private

const createFavourite = asyncHandler(async (req, res) => {
  const { title, desc, value, icon } = req.body;

  if (!title || !desc || !value || !icon) {
    res.status(400);
    throw new Error('Incomplete data supplied for new Chore');
  }

  // Get user using the id in the JWT
  const user = await User.findById(req.user.id);

  if (!user) {
    res.status(401);
    throw new Error('User not found');
  }

  const favourite = await Favourite.create({
    title,
    desc,
    value,
    icon,
    user: req.user.id,
  });

  res.status(201).json(favourite);
});

// @desc  Delete favourite
// @ route DELETE /api/favourites/:id
// @ access Private

const deleteFavourite = asyncHandler(async (req, res) => {
  // Get user using the id in the JWT
  const user = await User.findById(req.user.id);

  if (!user) {
    res.status(401);
    throw new Error('User not found');
  }

  let favourite;
  try {
    favourite = await Favourite.findById(req.params.id);
  } catch (error) {
    res.status(400);
    throw new Error('Bad Request');
  }

  if (!favourite) {
    res.status(404);
    throw new Error('Favourite not found');
  }

  if (favourite.user.toString() !== req.user.id) {
    res.status(401);
    throw new Error('Not Authorized');
  }

  await favourite.remove();

  res.status(200).json({ success: true });
});

module.exports = {
  getFavourites,
  createFavourite,
  deleteFavourite,
};
